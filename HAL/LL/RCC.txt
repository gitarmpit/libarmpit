AFIO:

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);

PWR:
LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);


GPIO: 

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);


ADC:

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);


LL_APB1_GRP1_PERIPH_*
LL_APB1_GRP1_PERIPH_*
LL_AHB1_GRP1_PERIPH_*
 



================================================


Clock:
LL_RCC_HSE_EnableBypass()
LL_RCC_HSE_Enable()
LL_RCC_HSE_Disable
LL_RCC_HSE_IsReady
LL_RCC_HSI_Enable
LL_RCC_HSI_IsReady
LL_RCC_HSI_SetCalibTrimming
LL_RCC_LSE_Enable
LL_RCC_LSE_EnableBypass
LL_RCC_LSE_IsReady
LL_RCC_LSI_Enable
LL_RCC_LSI_IsReady


LL_RCC_SetSysClkSource (LL_RCC_SYS_CLKSOURCE_HSI | LL_RCC_SYS_CLKSOURCE_HSE | LL_RCC_SYS_CLKSOURCE_PLL)
    RCC->CFGR, RCC_CFGR_SW, Source

LL_RCC_SetAHBPrescaler (LL_RCC_SYSCLK_DIV_1 { 2,4,8,16,64,128,256,512 } )

LL_RCC_SetAPB1Prescaler (LL_RCC_APB1_DIV_1 { 2,4,8,16 })

LL_RCC_SetAPB2Prescaler (LL_RCC_APB2_DIV_1 { 2,4,8,16 }) 

LL_RCC_GetAHBPrescaler
LL_RCC_GetAPB1Prescaler
LL_RCC_GetAPB2Prescaler

LL_RCC_ConfigMCO (

LL_RCC_MCO1SOURCE_NOCLOCK
LL_RCC_MCO1SOURCE_SYSCLK
LL_RCC_MCO1SOURCE_HSI
LL_RCC_MCO1SOURCE_HSE
LL_RCC_MCO1SOURCE_PLLCLK_DIV_2
LL_RCC_MCO1SOURCE_PLL2CLK (*)
LL_RCC_MCO1SOURCE_PLLI2SCLK_DIV2 (*)                                          )

LL_RCC_MCO1SOURCE_EXT_HSE (*)
LL_RCC_MCO1SOURCE_PLLI2SCLK (*)

LL_RCC_SetUSBClockSource

LL_RCC_SetADCClockSource ( LL_RCC_ADC_CLKSRC_PCLK2_DIV_2 4 6 8

LL_RCC_SetRTCClockSource ( LL_RCC_RTC_CLKSOURCE_NONE, LL_RCC_RTC_CLKSOURCE_LSE, LL_RCC_RTC_CLKSOURCE_LSI, LL_RCC_RTC_CLKSOURCE_HSE_DIV128 )

LL_RCC_EnableRTC
LL_RCC_ForceBackupDomainReset


LL_RCC_PLL_Enable

LL_RCC_PLL_IsReady

LL_RCC_PLL_ConfigDomain_SYS 
LL_RCC_PLL_SetMainSource

LL_RCC_ClearFlag_*
LL_RCC_IsActiveFlag_*

LL_RCC_EnableIT_*
LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks);



LL_RCC_WriteReg (same as WRITE_REG

LL_RCC_ReadReg  ( READ_REG)



#define SET_BIT(REG, BIT)     ((REG) |= (BIT))

#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))

#define READ_BIT(REG, BIT)    ((REG) & (BIT))

#define CLEAR_REG(REG)        ((REG) = (0x0))

#define WRITE_REG(REG, VAL)   ((REG) = (VAL))

#define READ_REG(REG)         ((REG))

#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))

ATOMIC_SET_BIT


__LL_RCC_CALC_PLLCLK_FREQ(
__LL_RCC_CALC_HCLK_FREQ
__LL_RCC_CALC_HCLK_FREQ(LL_RCC_GetAHBPrescaler())


