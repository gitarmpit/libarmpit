// Configure DMA

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);

  NVIC_SetPriority(DMA1_Channel4_IRQn, 0);
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
  NVIC_SetPriority(DMA1_Channel5_IRQn, 0);
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);

  // Channel 4:  RX 
  LL_DMA_ConfigTransfer(DMA1,
                        LL_DMA_CHANNEL_4,
                        LL_DMA_DIRECTION_PERIPH_TO_MEMORY | LL_DMA_PRIORITY_HIGH | LL_DMA_MODE_NORMAL |
                        LL_DMA_PERIPH_NOINCREMENT | LL_DMA_MEMORY_INCREMENT |
                        LL_DMA_PDATAALIGN_BYTE | LL_DMA_MDATAALIGN_BYTE);

  LL_DMA_ConfigAddresses(DMA1,
                         LL_DMA_CHANNEL_4,
                         // from                       to
                         LL_SPI_DMA_GetRegAddr(SPI2), (uint32_t)aRxBuffer,
                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, ubNbDataToReceive);

  // Complete and Error Interrupts
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_4);

   

  //  Channel 5:  TX
  LL_DMA_ConfigTransfer(DMA1,
                        LL_DMA_CHANNEL_5,
                        LL_DMA_DIRECTION_MEMORY_TO_PERIPH | LL_DMA_PRIORITY_HIGH | LL_DMA_MODE_NORMAL |
                        LL_DMA_PERIPH_NOINCREMENT | LL_DMA_MEMORY_INCREMENT |
                        LL_DMA_PDATAALIGN_BYTE | LL_DMA_MDATAALIGN_BYTE);
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5, (uint32_t)aTxBuffer, LL_SPI_DMA_GetRegAddr(SPI2),
                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, ubNbDataToTransmit);


  // Complete and Error Interrupts
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_5);

  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);


//  Configure SPI 

// configure pins, etc, same as simple SPI 

// enable interrupts 
LL_SPI_EnableDMAReq_RX(SPI2);
LL_SPI_EnableDMAReq_TX(SPI2); 


// Activation 

LL_SPI_Enable(SPI2);





/////////////////////////////////////////


void DMA1_Channel4_IRQHandler(void)
{

  if(LL_DMA_IsActiveFlag_TC4(DMA1))
  {
    LL_DMA_ClearFlag_TC4(DMA1);
    DMA1_ReceiveComplete_Callback();
  }
  else if(LL_DMA_IsActiveFlag_TE4(DMA1))
  {
    SPI2_TransferError_Callback();
  }

}

void DMA1_Channel5_IRQHandler(void)
{
  if(LL_DMA_IsActiveFlag_TC5(DMA1))
  {
    LL_DMA_ClearFlag_TC5(DMA1);
    DMA1_TransmitComplete_Callback();
  }
  else if(LL_DMA_IsActiveFlag_TE5(DMA1))
  {
    SPI2_TransferError_Callback();
  }
}


void DMA1_ReceiveComplete_Callback(void)
{
  /* DMA Rx transfer completed */
  ubReceptionComplete = 1;
}

void DMA1_TransmitComplete_Callback(void)
{
  /* DMA Tx transfer completed */
  ubTransmissionComplete = 1;
}
